export = createSecurityContext;
/**
 * Tries to create a new security context by authenticating the user via the given service(s) based on a jwt token.
 * If the jwt is missing or cannot be validated, an error will be thrown.
 * The contextConfig must either contain a jwt token directly or a req object from whose Authorization header the jwt can be extracted as Bearer token.
 * @param {Service[]} services
 * @param {Types.SecurityContextConfig} contextConfig
 * @returns {Promise<SecurityContext>}
 * @throws {XssecError} error with a descriptive message and a suggested statusCode for the application response. The cause of the error can be checked via instanceof against the various XssecError subclasses.
 */
declare function createSecurityContext(services: Service[], contextConfig: Types.SecurityContextConfig): Promise<SecurityContext>;
import Service = require("../service/Service");
import Types = require("../util/Types");
import SecurityContext = require("./SecurityContext");
//# sourceMappingURL=createSecurityContext.d.ts.map