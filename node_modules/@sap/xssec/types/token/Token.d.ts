export = Token;
declare class Token {
    constructor(jwt: any, { header, payload }?: {
        header: any;
        payload: any;
    });
    get audiences(): string[];
    get azp(): any;
    get clientId(): any;
    get email(): any;
    /**
     * Returns whether the token is expired based on claim exp (expiration time).
     * There is a 1min leeway after the exp in which the token still counts as valid to account for clock skew.
     * @return {Boolean} true if token has nbf and nbf date lies in future, false otherwise
     */
    get expired(): boolean;
    get expirationDate(): Date;
    get familyName(): any;
    get givenName(): any;
    get grantType(): any;
    /** @return {Types.JwtHeader} Token header as parsed object */
    get header(): Types.JwtHeader;
    get issuer(): string;
    get issueDate(): Date;
    /** @return {String} JWT used to construct this Token instance as raw String */
    get jwt(): string;
    /**
     * Returns whether the token is not yet valid based on the optional nbf (no use before) claim.
     * There is a 1min leeway before the nbf in which the token already counts as valid to account for clock skew.
     * @return {Boolean} true if token has nbf and nbf date lies in future, false otherwise
     */
    get notYetValid(): boolean;
    get origin(): any;
    /** @return {Types.JwtPayload} Token payload as parsed object */
    get payload(): Types.JwtPayload;
    /**
     * Returns the remaining time until expiration in seconds based on claim exp (expiration time).
     * There is a 1min leeway after the exp in which the token still counts as valid to account for clock skew.
     * @returns seconds until expiration or 0 if expired
     */
    get remainingTime(): number;
    get subject(): string;
    get userName(): any;
    get userId(): any;
    getAudiencesArray(): string[];
    getAzp(): any;
    getClientId: () => any;
    getEmail(): any;
    getExpirationDate(): Date;
    getFamilyName(): any;
    getGivenName(): any;
    getGrantType(): any;
    getHeader(): Types.JwtHeader;
    getIssuedAt(): Date;
    getIssuer(): string;
    getPayload(): Types.JwtPayload;
    getSubject(): string;
    getTokenValue(): string;
    getUserId(): any;
    #private;
}
import Types = require("../util/Types");
//# sourceMappingURL=Token.d.ts.map