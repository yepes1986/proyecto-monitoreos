export = XsuaaService;
/**
 * New SAP BTP applications should start with SAP Identity Services instead of XSUAA! See README for details.\
 * This {@link Service} class is constructed from XSUAA credentials to provide an API with selected functionality against that XSUAA service instance, e.g. token validation and token fetches.
 */
declare class XsuaaService extends Service {
    /**
     * @param {Types.ServiceCredentials & Types.XsuaaServiceCredentials} credentials
     * @param {Types.ServiceConfig} [serviceConfig={}]
     */
    constructor(credentials: Types.ServiceCredentials & Types.XsuaaServiceCredentials, serviceConfig?: Types.ServiceConfig);
    endpoints: {
        oidc_info: string;
        jwks: string;
        token: string;
    };
    /**
     * @overrides
     * @inheritdoc
     */
    acceptsTokenAudience(token: any): any;
    /**
     * @override
     * @param {String|XsuaaToken} token as JWT or XsuaaToken object
     * @param {*} contextConfig
     * @returns {Promise<XsuaaSecurityContext}
     */
    override createSecurityContext(token: string | XsuaaToken, contextConfig?: any): Promise<XsuaaSecurityContext>;
    getJwks(token: any, contextConfig: any): Promise<any>;
    /**
     * @internal
     * Returns the base URL (https protocol + uaadomain from the credentials) that can be used for JWKS fetches.
     * @returns {String} base URL for JWKS fetches
     */
    get jwksBaseUrl(): string;
    fetchJwks(jwksParams: any, correlationId: any): Promise<any>;
    /**
     * Fetches a token from this service with this service's client credentials.
     * @param {Types.TokenFetchOptions & Types.XsuaaTokenFetchOptions} options
     * @returns {Promise<Types.TokenFetchResponse>} response
     */
    fetchClientCredentialsToken(options?: Types.TokenFetchOptions & Types.XsuaaTokenFetchOptions): Promise<Types.TokenFetchResponse>;
    /**
     * Fetches a user token from this service with the given username and password.
     * @param {String} username
     * @param {String} password
     * @param {Types.TokenFetchOptions & Types.XsuaaTokenFetchOptions} options
     * @returns {Promise<Types.TokenFetchResponse & Types.RefreshableTokenFetchResponse>} response
     */
    fetchPasswordToken(username: string, password: string, options?: Types.TokenFetchOptions & Types.XsuaaTokenFetchOptions): Promise<Types.TokenFetchResponse & Types.RefreshableTokenFetchResponse>;
    /**
     * Fetches a JWT bearer token from this service with the given user token as assertion.
     * @param {String} assertion JWT bearer token used as assertion
     * @param {Types.TokenFetchOptions & Types.XsuaaTokenFetchOptions} options
     * @returns {Promise<Types.TokenFetchResponse & Types.RefreshableTokenFetchResponse>} response
     */
    fetchJwtBearerToken(assertion: string, options?: Types.TokenFetchOptions & Types.XsuaaTokenFetchOptions): Promise<Types.TokenFetchResponse & Types.RefreshableTokenFetchResponse>;
    /** @override */
    override buildTokenRequest(grant_type: any, options: any): {
        method: string;
        body: URLSearchParams;
    };
    /**
     * Determines the URL that can be used for fetching tokens from this service, optionally adjusted for a tenant in the same subaccount.
     * @override
     * @inheritdoc
     * @param {String} options.tenant
     */
    override getTokenUrl(grant_type: any, options?: {}): Promise<URL>;
    #private;
}
import Service = require("./Service");
import XsuaaToken = require("../token/XsuaaToken");
import XsuaaSecurityContext = require("../context/XsuaaSecurityContext");
import Types = require("../util/Types");
//# sourceMappingURL=XsuaaService.d.ts.map