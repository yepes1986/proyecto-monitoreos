export = XsaService;
/**
 * New SAP BTP applications should start with SAP Identity Services instead of XSA! See README for details.\
 * This {@link Service} class is constructed from XSA credentials to provide an API with selected functionality against that XSA service instance, e.g. token validation and token fetches.
 */
declare class XsaService extends XsuaaService {
    /**
     * @param {Types.ServiceCredentials & Types.XsaServiceCredentials} credentials
     * @param {Types.ServiceConfig} [serviceConfig={}]
     */
    constructor(credentials: Types.ServiceCredentials & Types.XsaServiceCredentials, serviceConfig?: Types.ServiceConfig);
    /**
     * @override
     * @param {String|XsaToken} token token as JWT or XsaToken object
     * @param {Types.SecurityContextConfig} contextConfig
     * @returns {Promise<XsaSecurityContext>}
     */
    override createSecurityContext(token: string | XsaToken, contextConfig?: Types.SecurityContextConfig): Promise<XsaSecurityContext>;
    validateTokenSignature(token: any, contextConfig: any): Promise<void>;
    /**
     * Fetches a token from this service with this service's client credentials.
     * @param {Types.TokenFetchOptions} options
     * @returns {Promise<Types.TokenFetchResponse>} response
     */
    fetchClientCredentialsToken(options?: Types.TokenFetchOptions): Promise<Types.TokenFetchResponse>;
    /**
     * Fetches a user token from this service with the given username and password.
     * @param {String} username
     * @param {String} password
     * @param {Types.TokenFetchOptions} options
     * @returns {Promise<Types.TokenFetchResponse & Types.RefreshableTokenFetchResponse>} response
     */
    fetchPasswordToken(username: string, password: string, options?: Types.TokenFetchOptions): Promise<Types.TokenFetchResponse & Types.RefreshableTokenFetchResponse>;
    /**
     * Fetches a JWT bearer token from this service with the given user token as assertion.
     * @param {String} assertion JWT bearer token used as assertion
     * @param {Types.TokenFetchOptions} options
     * @returns {Promise<Types.TokenFetchResponse & Types.RefreshableTokenFetchResponse>} response
     */
    fetchJwtBearerToken(assertion: string, options?: Types.TokenFetchOptions): Promise<Types.TokenFetchResponse & Types.RefreshableTokenFetchResponse>;
    /**
     * Determines the URL that can be used for fetching tokens from this service.
     * @param {Types.GrantType} grant_type
     */
    getTokenUrl(grant_type: Types.GrantType): Promise<URL>;
    #private;
}
import XsuaaService = require("./XsuaaService");
import XsaToken = require("../token/XsaToken");
import Types = require("../util/Types");
import XsaSecurityContext = require("../context/XsaSecurityContext");
//# sourceMappingURL=XsaService.d.ts.map