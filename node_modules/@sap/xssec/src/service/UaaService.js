'use strict';


const SecurityContext = require('../context/SecurityContext');
const UaaSecurityContext = require('../context/UaaSecurityContext');
const UaaToken = require('../token/UaaToken');
const InvalidCredentialsError = require('../error/configuration/InvalidCredentialsError');
const { getLogger } = require('../util/logging');
const Types = require("../util/Types");
const XsuaaService = require('./XsuaaService');

const LOG = getLogger("UaaService.js");

/**
 * New SAP BTP applications should start with SAP Identity Services instead of CF UAA! See README for details.\
 * This {@link Service} class is constructed from CF UAA credentials to provide an API with selected functionality against that UAA service instance, e.g. token validation and token fetches.
 */
class UaaService extends XsuaaService {

    /**
     * @param {Types.ServiceCredentials & Types.UaaServiceCredentials} credentials 
     * @param {Types.ServiceConfig} [serviceConfig={}]
     */
    constructor(credentials, serviceConfig) {
        super(credentials, serviceConfig);
    }

    /**
     * @override
     * @param {String|UaaToken} token token as JWT or UaaToken object
     * @param {Types.SecurityContextConfig} contextConfig 
     * @returns {Promise<UaaSecurityContext>}
     */
    async createSecurityContext(token, contextConfig = {}) {
        if (typeof token === "string") token = new UaaToken(token);

        SecurityContext.buildContextConfig(contextConfig);
        const uaaToken = new UaaToken(token.jwt, { header: token.header, payload: token.payload }); // parse generic token
        await this.validateToken(uaaToken, contextConfig);

        const ctx = new UaaSecurityContext(this, uaaToken, contextConfig);
        for (let extension of this.config.context?.extensions || []) {
            await extension.extendSecurityContext(ctx);
        }
        return ctx;
    }

    /**
    * @overrides
    * @inheritdoc
    */
    acceptsTokenAudience(token) {
        this.validateCredentials("validate token audience", "clientid");

        if(!(token instanceof UaaToken)) {
            // cast to UaaToken, so token.scopes getter exists for the checks below
            token = new UaaToken(null, { header: token.header, payload: token.payload });
        }

        // CF UAA tokens with grant_type === 'user_token' might not have audiences filled, so a fallback to scopes is needed
        const tokenAudiences = token.audiences?.length > 0 ? token.audiences : (token.scopes ?? []);
        if(token.payload.cid) {
            tokenAudiences.push(token.payload.cid);
        }

        return tokenAudiences.some(a => a === this.credentials.clientid || a.startsWith(`${this.credentials.clientid}.`))
    }
}

module.exports = UaaService;