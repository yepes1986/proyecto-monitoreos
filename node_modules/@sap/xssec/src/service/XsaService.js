'use strict';


const SecurityContext = require('../context/SecurityContext');
const XsaSecurityContext = require('../context/XsaSecurityContext');
const XsaToken = require('../token/XsaToken');
const Jwk = require('../jwks/Jwk');
const InvalidCredentialsError = require('../error/configuration/InvalidCredentialsError');
const MissingKidError = require('../error/validation/MissingKidError');
const MissingVerificationKeyError = require('../error/validation/MissingVerificationKeyError');
const { getLogger } = require('../util/logging');
const Types = require("../util/Types");
const XsuaaService = require('./XsuaaService');

const LOG = getLogger("XsaService.js");

/**
 * New SAP BTP applications should start with SAP Identity Services instead of XSA! See README for details.\
 * This {@link Service} class is constructed from XSA credentials to provide an API with selected functionality against that XSA service instance, e.g. token validation and token fetches.
 */
class XsaService extends XsuaaService {

    /**
     * @param {Types.ServiceCredentials & Types.XsaServiceCredentials} credentials 
     * @param {Types.ServiceConfig} [serviceConfig={}]
     */
    constructor(credentials, serviceConfig) {
        super(credentials, serviceConfig);
    }

    /**
     * @override
     * @param {String|XsaToken} token token as JWT or XsaToken object
     * @param {Types.SecurityContextConfig} contextConfig 
     * @returns {Promise<XsaSecurityContext>}
     */
    async createSecurityContext(token, contextConfig = {}) {
        if (typeof token === "string") token = new XsaToken(token);

        SecurityContext.buildContextConfig(contextConfig);
        const xsaToken = new XsaToken(token.jwt, { header: token.header, payload: token.payload }); // parse generic token
        await this.validateToken(xsaToken, contextConfig);

        const ctx = new XsaSecurityContext(this, xsaToken, contextConfig);
        for (let extension of this.config.context?.extensions || []) {
            await extension.extendSecurityContext(ctx);
        }
        return ctx;
    }

    async validateTokenSignature(token, contextConfig) {
        const pemKeyFromConfig = this.credentials.verificationkey;

        if (!token.header.jku || !token.header.kid || token.header.kid == 'legacy-token-key') {
            LOG.info("Token header contained no JKU or KID or the KID was 'legacy-token-key'");
            return this.#validateTokenSignatureWithFallback(token, pemKeyFromConfig);
        }

        try {
            await super.validateTokenSignature(token, contextConfig);
        } catch (error) {
            if (error instanceof MissingKidError) {
                LOG.info("JWKS did not contain kid.");
                return this.#validateTokenSignatureWithFallback(token, pemKeyFromConfig);
            } else {
                throw error;
            }
        }
    }

    #validateTokenSignatureWithFallback(token, pemKeyFromConfig) {
        if (!pemKeyFromConfig) {
            throw new MissingVerificationKeyError();
        } else {
            LOG.info("Validating token signature with verificationkey from service configuration.");
            return Jwk.fromPEM(pemKeyFromConfig).validateSignature(token);
        }
    }

    /**
     * Fetches a token from this service with this service's client credentials.
     * @param {Types.TokenFetchOptions} options
     * @returns {Promise<Types.TokenFetchResponse>} response
     */
    async fetchClientCredentialsToken(options = {}) {
        return super.fetchClientCredentialsToken(options);
    }

    /**
     * Fetches a user token from this service with the given username and password.
     * @param {String} username
     * @param {String} password
     * @param {Types.TokenFetchOptions} options
     * @returns {Promise<Types.TokenFetchResponse & Types.RefreshableTokenFetchResponse>} response
     */
    async fetchPasswordToken(username, password, options = {}) {
        return super.fetchPasswordToken(username, password, options);
    }

    /**
     * Fetches a JWT bearer token from this service with the given user token as assertion.
     * @param {String} assertion JWT bearer token used as assertion   
     * @param {Types.TokenFetchOptions} options
     * @returns {Promise<Types.TokenFetchResponse & Types.RefreshableTokenFetchResponse>} response
     */
    async fetchJwtBearerToken(assertion, options = {}) {
        return super.fetchJwtBearerToken(assertion, options);
    }

    /**
     * Determines the URL that can be used for fetching tokens from this service.
     * @param {Types.GrantType} grant_type
     */
    async getTokenUrl(grant_type) {
        let baseUrl;
        
        if (this.credentials.certificate) {
            this.validateCredentials("fetch token via certificate authentication", "certurl");
            baseUrl = this.credentials.certurl;
        } else {
            this.validateCredentials("fetch token via client secret authentication", "url");
            baseUrl = this.credentials.url;
        }

        return new URL(this.endpoints.token, baseUrl);
    }

    /**
     * @override
     * @inheritdoc
     */
    get jwksBaseUrl() {
        this.validateCredentials("fetch JWKS", "url");
        return this.credentials.url;
    }
}

module.exports = XsaService;