const fetch = require("node-fetch");

const { getLogger } = require("./logging");
const RequestError = require("../error/network/RequestError");
const ResponseError = require("../error/network/ResponseError");
const {CORRELATIONID_HEADER_VCAP, DEFAULT_TIMEOUT, MAX_TIMEOUT, USER_AGENT } = require('../util/constants');
const { shrinkRequestOptionsForLog } = require("./util");

const LOG = getLogger("request.js");

async function jsonRequest(url, request, { requestName, correlationId, extractHeaders } = {}) {
    Object.assign(request, {
        redirect: "error",
        follow: 0,
        timeout: Math.min(MAX_TIMEOUT, request.timeout ?? DEFAULT_TIMEOUT),
    });
    
    request.headers ??= {};
    Object.assign(request.headers, {
        Accept: 'application/json',
        'User-Agent': USER_AGENT
    });

    if(correlationId) {
        request.headers[CORRELATIONID_HEADER_VCAP] = correlationId;
    }
    
    LOG.debug(`HTTP request [${requestName}] to ${url} with options`, {correlationId, ...shrinkRequestOptionsForLog(request)});
    let response;
    try {
        response = await fetch(url, request);
    } catch(e) {        
        const error = new RequestError(url, {...request, name: requestName}, e);
        LOG.error(error.message, { correlationId });
        throw error;
    }
    
    if(!response.ok) {
        const responseText = await response.text();
        const error = new ResponseError(url, {...request, name: requestName}, response.status, responseText);
        LOG.error(error.message, {correlationId});
        throw error;
    }

    const json = await response.json();
    LOG.debug(`HTTP response [${requestName}]:`, {correlationId, ...json});

    if(extractHeaders != null) {
        json[extractHeaders] = response.headers;
    }

    return json;
}

module.exports = {
    jsonRequest
}